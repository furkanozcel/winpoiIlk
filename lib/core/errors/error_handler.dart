import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'dart:io';
import 'app_exception.dart';

// Merkezi error handling sƒ±nƒ±fƒ±
class ErrorHandler {
  /// Firebase ve diƒüer hatalarƒ± AppException'a d√∂n√º≈üt√ºr√ºr
  static AppException handleError(dynamic error) {
    // Firebase Auth hatalarƒ±
    if (error is FirebaseAuthException) {
      return AuthException.fromFirebaseCode(error.code, error.message);
    }

    // Firestore hatalarƒ±
    if (error is FirebaseException) {
      return DatabaseException.fromFirestoreCode(error.code, error.message);
    }

    // Network hatalarƒ±
    if (error is SocketException) {
      return const NetworkException(
        message:
            'ƒ∞nternet baƒülantƒ±sƒ± sorunu. L√ºtfen baƒülantƒ±nƒ±zƒ± kontrol edin.',
        code: 'network_error',
      );
    }

    // Format hatalarƒ±
    if (error is FormatException) {
      return ValidationException(
        message: 'Ge√ßersiz veri formatƒ±: ${error.message}',
        code: 'format_error',
      );
    }

    // Timeout hatalarƒ±
    if (error is TimeoutException) {
      return const NetworkException(
        message: 'ƒ∞stek zaman a≈üƒ±mƒ±na uƒüradƒ±. L√ºtfen tekrar deneyin.',
        code: 'timeout_error',
      );
    }

    // AppException zaten doƒüru formatta ise olduƒüu gibi d√∂nd√ºr
    if (error is AppException) {
      return error;
    }

    // Bilinmeyen hatalar i√ßin genel exception
    return BusinessException(
      message: 'Beklenmeyen bir hata olu≈ütu: ${error.toString()}',
      code: 'unknown_error',
      details: error.toString(),
    );
  }

  /// Hata mesajƒ±nƒ± kullanƒ±cƒ± dostu hale getirir
  static String getUserFriendlyMessage(AppException exception) {
    return exception.message;
  }

  /// Hata t√ºr√ºne g√∂re SnackBar rengi d√∂nd√ºr√ºr
  static Color getErrorColor(AppException exception) {
    switch (exception.runtimeType) {
      case const (AuthException):
        return Colors.red.shade600;
      case const (DatabaseException):
        return Colors.orange.shade600;
      case const (NetworkException):
        return Colors.blue.shade600;
      case const (ValidationException):
        return Colors.yellow.shade700;
      case const (BusinessException):
        return Colors.purple.shade600;
      case const (StorageException):
        return Colors.green.shade600;
      default:
        return Colors.red.shade600;
    }
  }

  /// Hata t√ºr√ºne g√∂re ikon d√∂nd√ºr√ºr
  static IconData getErrorIcon(AppException exception) {
    switch (exception.runtimeType) {
      case const (AuthException):
        return Icons.security;
      case const (DatabaseException):
        return Icons.storage;
      case const (NetworkException):
        return Icons.wifi_off;
      case const (ValidationException):
        return Icons.warning;
      case const (BusinessException):
        return Icons.business;
      case const (StorageException):
        return Icons.folder;
      default:
        return Icons.error;
    }
  }

  /// Hata t√ºr√ºne g√∂re yeniden deneme gerekip gerekmediƒüini belirler
  static bool shouldRetry(AppException exception) {
    switch (exception.code) {
      case 'network_error':
      case 'timeout_error':
      case 'unavailable':
      case 'internal':
      case 'aborted':
        return true;
      default:
        return false;
    }
  }

  /// Debug modda konsola detaylƒ± hata bilgisi yazdƒ±rƒ±r
  static void logError(AppException exception, {StackTrace? stackTrace}) {
    if (kDebugMode) {
      print('üö® ERROR: ${exception.code}');
      print('üìù Message: ${exception.message}');
      if (exception.details != null) {
        print('üìã Details: ${exception.details}');
      }
      if (stackTrace != null) {
        print('üìç Stack Trace: $stackTrace');
      }
      print('‚îÄ' * 50);
    }
  }
}

// Timeout exception sƒ±nƒ±fƒ±
class TimeoutException implements Exception {
  final String message;
  const TimeoutException(this.message);

  @override
  String toString() => message;
}

// Debug mode kontrol√º i√ßin helper
bool get kDebugMode {
  bool inDebugMode = false;
  assert(inDebugMode = true);
  return inDebugMode;
}
